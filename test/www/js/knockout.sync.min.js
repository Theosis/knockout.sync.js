!function(factory){"function"==typeof require&&"object"==typeof exports&&"object"==typeof module?factory(require("knockout"),require("funcsync"),require("socket.io"),exports):"function"==typeof define&&define.amd?define(["knockout","funcsync","socket.io","exports"],factory):factory(ko,funcsync,io,ko.mapping={})}(function(ko,funcsync,io,exports){function updateModel(data,self){timestamp=data.timestamp||Date.now();var S=data.statics,model=data.dataModel,V=data.validation,methods=data.methods,M=funcsync.functify(model,self),F=funcsync.functify(methods,self);thePrototype=M,ko.mapObject(self,M,V,F,S),theRealModel(self),firstMapping&&(ko.applyBindings(theRealModel),firstMapping=!1)}var thePrototype,socket,options,timestamp,theRealModel=ko.observable(),theViewModel={},firstMapping=!0;exports.keepInSync=ko.keepInSync=function(_options){options=_options,socket=io.connect(options.URI),options.VM&&updateModel(options.VM,theViewModel),socket.on(options.modelMessage||"updateModel",function(data){options.versioned&&data.timestamp&&data.timestamp<=timestamp||updateModel(data,theViewModel)}),socket.on(options.dataMessage||"updateData",function(data){options.versioned&&data.timestamp&&data.timestamp<=timestamp||ko.updateViewModel(theRealModel(),data.data)})},exports.doSync=ko.doSync=function(){socket&&thePrototype&&socket.emit(options.shareMessage||"share",{data:ko.toJSONByPrototype(theRealModel(),thePrototype)})}});